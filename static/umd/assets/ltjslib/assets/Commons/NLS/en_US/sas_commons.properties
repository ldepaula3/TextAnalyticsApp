# Tuple label
missingValue.txt=(missing)
subTotal.txt=Subtotal:
total.txt=Total
suppressed.txt=(suppressed)

# VERBOSE expression descriptions
# template placeholders:
# {n} where n in [0 ... 9]: placeholder for the n-th function argument (zero-based)
# {,}: placeholder for the list separator
expression.description.error.unrecognized.txt = Unrecognized expression
expression.description.in.fmt.txt = {0} in {1}
expression.description.notIn.fmt.txt = {0} not in {1}
expression.description.equalTo.fmt.txt = {0} is {1}
expression.description.notEqualTo.fmt.txt = {0} is not {1}
expression.description.greaterThan.fmt.txt = {0} greater than {1}
expression.description.greaterThanEqualTo.fmt.txt = {0} greater than or equal to {1}
expression.description.lessThan.fmt.txt = {0} less than {1}
expression.description.lessThanEqualTo.fmt.txt = {0} less than or equal to {1}
expression.description.between.fmt.txt = {0} between {1} and {2}
expression.description.contains.fmt.txt = {0} contains {1}
expression.description.notContains.fmt.txt = {0} does not contain {1}
expression.description.beginsWith.fmt.txt = {0} begins with {1}
expression.description.endsWith.fmt.txt = {0} ends with {1}
expression.description.missing.fmt.txt = {0} is missing
expression.description.notMissing.fmt.txt = {0} is not missing

expression.description.after.fmt.txt = {0} starts after {1}
expression.description.onOrAfter.fmt.txt = {0} starts on or after {1}
expression.description.before.fmt.txt = {0} ends before {1}
expression.description.onOrBefore.fmt.txt = {0} ends on or before {1}

expression.description.compoundAnd.fmt.txt = {0} AND {1}
expression.description.compoundAnd.parenthetical.fmt.txt = ({0}) AND ({1})
expression.description.compoundOr.fmt.txt = {0} OR {1}
expression.description.compoundOr.parenthetical.fmt.txt = ({0}) OR ({1})

expression.description.betweenExcluding.fmt.txt = {0} between {1} and {2} excluding bounds
expression.description.outsideIncluding.fmt.txt = {0} outside {1} and {2} including bounds
expression.description.outsideExcluding.fmt.txt = {0} outside {1} and {2} excluding bounds

# Moved from iOS: InfoPanelAnyColumn, InfoPanelCurrentColumn
expression.description.anyValue.txt = Any cell value in row
expression.description.currentValue.txt = Cell value

expression.description.anyMeasureValue.txt = Any measure value

# INTERFACE expression descriptions
expression.description.interface.in.fmt.txt = {0} IN { {1} }
expression.description.interface.notIn.fmt.txt = {0} NOT IN { {1} }
expression.description.interface.missing.fmt.txt = {0} MISSING
expression.description.interface.notMissing.fmt.txt = {0} NOT MISSING
expression.description.interface.contains.fmt.txt = {1} IN {0}
expression.description.interface.notContains.fmt.txt = {1} NOT IN {0}
expression.description.interface.between.fmt.txt = {1} ≤ {0} ≤ {2}
expression.description.interface.betweenExcluding.fmt.txt = {1} < {0} < {2}
expression.description.interface.outsideIncluding.fmt.txt = NOT {1} ≤ {0} ≤ {2}
expression.description.interface.outsideExcluding.fmt.txt = NOT {1} < {0} < {2}
expression.description.interface.upper.fmt.txt = Upper( {0} )
expression.description.interface.lower.fmt.txt = Lower( {0} )
expression.description.interface.pow.fmt.txt = {0} ^ {1}
expression.description.interface.root.fmt.txt = Root[{1}]( {0} )
expression.description.interface.abs.fmt.txt = | {0} |
expression.description.interface.mod.fmt.txt = {0} % {1}
expression.description.interface.round.fmt.txt = Round[{1}]( {0} )
expression.description.interface.log.fmt.txt = Log[{1}]( {0} )
expression.description.interface.cond.fmt.txt = IF {0} THEN {1} ELSE {2}
expression.description.interface.concatenate.fmt.txt = Concat( {0}{,}{1} )
expression.description.interface.find.fmt.txt = Find( {0}{,}{1} )
expression.description.interface.findCharacter.fmt.txt = Find( {0}{,}{1} )
expression.description.interface.length.fmt.txt = Length( {0} )
expression.description.interface.pathBeginsWith.fmt.txt = {0} StartsWith {1}
expression.description.interface.pathEndsWith.fmt.txt = {0} EndsWith {1}
expression.description.interface.pathContains.fmt.txt = {1} IN {0}
expression.description.interface.pathContainsNode.fmt.txt = { {1}{,}{2} } IN {0}
expression.description.interface.cellIndex.fmt.txt = Cell[{0}+{1}]
expression.description.interface.aggregateCells.fmt.txt = {0}( {1} FOR {2}[{3}:{4}] )
expression.description.interface.rows.fmt.txt = Rows
expression.description.interface.columns.fmt.txt = Columns
expression.description.interface.pathContainsSubPath.fmt.txt = ContainsSubPath( {0}{,}{1}{,}{2}{,}{3} )
expression.description.interface.anyMeasure.txt = Any Measure

# Copied from ConditionOperator.* in Flex MobileDesigner (VAD)
expression.operator.in.txt = In
expression.operator.notIn.txt = Not In
expression.operator.equals.txt = Equal
expression.operator.notEquals.txt = Not Equal
expression.operator.greaterThan.txt = Greater than
expression.operator.greaterThanEqualTo.txt = Greater Than or Equal
expression.operator.lessThan.txt = Less Than
expression.operator.lessThanEqualTo.txt = Less Than or Equal
expression.operator.betweenInclusive.txt = Between (Inclusive)
expression.operator.betweenExclusive.txt = Between (Exclusive)
expression.operator.outsideRangeInclusive.txt = Not Between (Inclusive)
expression.operator.outsideRangeExclusive.txt = Not Between (Exclusive)
expression.operator.contains.txt = Contains
expression.operator.notContains.txt = Does Not Contain
expression.operator.beginsWith.txt = Begins With
expression.operator.endsWith.txt = Ends With
expression.operator.missing.txt = Is Missing
expression.operator.notMissing.txt = Is Not Missing

expression.operator.after.txt = Starts after
expression.operator.onOrAfter.txt = Starts on or after
expression.operator.before.txt = Ends before
expression.operator.onOrBefore.txt = Ends on or before


ALL_OTHER.txt=All Other

#Aggregation labels
aggregation.minimum.txt = Minimum:
aggregation.maximum.txt = Maximum:
aggregation.total.txt = Total:
aggregation.count.txt = Count:
aggregation.sum.txt = Sum:
aggregation.average.txt = Average:
aggregation.distinct.txt = Distinct Count:
aggregation.skew.txt = Skewness:
aggregation.kurtosis.txt = Kurtosis:
aggregation.coefficientOfVariation.txt = Coefficient of Variation:
aggregation.uncorrectedSumOfSquares.txt = Uncorrected Sum of Squares:
aggregation.correctedSumOfSquares.txt = Corrected Sum of Squares:
aggregation.tStatistic.txt = T-Statistic:
aggregation.pValue.txt = P-value:
aggregation.firstQuartile.txt = First Quartile:
aggregation.median.txt = Median:
aggregation.thirdQuartile.txt = Third Quartile:
aggregation.standardDeviation.txt = Standard Deviation:
aggregation.standardError.txt = Standard Error:
aggregation.variance.txt = Variance:
aggregation.numberMissing.txt = Number Missing:

#table grand total
table.grandTotal.txt = Grand Total

#table sort
table.sort.sort.txt = Sort
table.sort.ascending.txt = Ascending
table.sort.descending.txt = Descending
table.sort.none.txt = None
table.sort.resetsort.txt = Reset Sort

#table sparkline
table.sparkline.to.txt = to
table.sparkline.final.txt = Final

#crosstab actions
crosstab.expand.txt = Expand
crosstab.collapse.txt = Collapse
crosstab.drill.txt = Drill
crosstab.pageDown.txt = Jump to next row
crosstab.pageDownEnd.txt = Jump to bottom row
crosstab.pageUp.txt = Jump to previous row
crosstab.pageUpEnd.txt = Jump to top row

#scroll tooltip
scroll.column.txt = Column {0} of {1}
scroll.row.txt = Row {0} of {1}

#default hierarchy labels
hierarchy.column.txt = Column Hierarchy
hierarchy.row.txt = Row Hierarchy
hierarchy.hierarchy.txt = Hierarchy

#accessibility
accessibility.dataElement.hint.txt = Double tap to open tooltip and select data element.
accessibility.objectType.crosstab.txt = Cross Tab
accessibility.objectType.dataGrid.txt = Data Grid

#accessibility used by KPIs
accessibility.kpi.header.txt = Group = {0}
accessibility.kpi.selection.txt = {0} of {1}


#indicates the row and column for a table cell for accessibility
accessibility.table.rowColumn.txt = Row {0}; Column {1}
accessibility.table.row.txt = Row {0}
accessibility.table.column.txt = Column {0}

#indicates the cell is a column header in the table for accessibility
accessibility.table.header.txt = Header

#indicates the column for a table header or totals cell.
accessibility.table.column.txt = Column {0}

#indicates the sort, if applicable, in a column heading for accessibility
accessibility.table.sortPrimaryDescending.txt = Primary sort descending
accessibility.table.sortSecondaryDescending.txt = Secondary sort descending
accessibility.table.sortDescending.txt = Sort descending
accessibility.table.sortPrimaryAscending.txt = Primary sort ascending
accessibility.table.sortSecondaryAscending.txt = Secondary sort ascending
accessibility.table.sortAscending.txt = Sort ascending
accessibility.table.sortEnabled.hint.txt = Double tap to open sort tooltip.

# indicates datagrid/crosstab selected state
accessibility.datagrid.rowSelected.txt = Row selected
accessibility.crosstab.cellSelected.txt = Selected

# accessibility hints used with table cells, based on whether they have a tooltip
accessibility.table.selectRow.hint.txt = Double tap to toggle row selection.
accessibility.table.openTooltip.hint.txt = Double tap to open tooltip and toggle row selection.

# accessibility hints used with crosstab cells
accessibility.crosstab.selectCell.hint.txt = Double tap to toggle cell selection.

# accesibility hints for crosstab total label on the header
accessibility.crosstab.rowTotal.txt = Row Total
accessibility.crosstab.columnTotal.txt = Column Total

# indicates crosstab row/column header
accessibility.crosstab.rowHeader.txt = Row Header
accessibility.crosstab.columnHeader.txt = Column Header

# indicates crosstab row/column category 
accessibility.crosstab.rowCategory.txt = Row Category
accessibility.crosstab.columnCategory.txt = Column Category

# indicates the level number for crosstab row/column header
accessibility.crosstab.level.txt = Level {0}

# indicates the collapsed/expanded state for crosstab row/column header
accessibility.crosstab.collapsed.txt = Collapsed
accessibility.crosstab.expanded.txt = Expanded
accessibility.crosstab.drillable.txt = Link

# indicates the number row/column spans for crosstab row/column header
accessibility.crosstab.rowColumnSpans.txt = Spans {0} columns and {1} rows
accessibility.crosstab.rowSpans.txt = Spans {0} rows
accessibility.crosstab.columnSpans.txt = Spans {0} columns

# accessibility, indicates if the cell contains a visual
accessibility.table.containsKPI.txt = Contains a KPI
accessibility.table.containsSparkline.txt = Contains a sparkline

# indicates that the cell is a column total cell for accessibility
accessibility.table.columnTotal.txt = Total

# indicates an empty cell when a column has no total in the totals row for accessibility
accessibility.table.noTotal.txt = No column total

# indicates a cell with a missing value in the data grid for
# accessibility
accessibility.table.missingValue.txt = Missing

# indicates the order preference for search results
# that might include address, city, and region
# ex.  address={0},city={1},region={2}
searchItem.AddressCityRegion.txt = {0}, {1}, {2}
searchItem.AddressCity.txt = {0}, {1}
searchItem.AddressRegion.txt = {0}, {1}
searchItem.CityRegion.txt = {0}, {1}

route.LessThanAMinute.txt = <1 min
route.DistanceKilometers.fmt.txt = {0} km
route.DistanceMiles.fmt.txt = {0} miles
route.DistanceMile.fmt.txt = {0} mile
route.Minute.fmt.txt = {0} min
route.HoursMinutes.fmt.txt = {0} hr {1} min
route.Hours.fmt.txt = {0} hr

# used by tooltips when not all of the data values can be displayed.
tooltip.numberDisplayed.txt = {0} of {1}
tooltip.colon.txt = {0}:

# Display List Separator, used to delimit lists of values in user facing text
displayListSeparator=,

promptbuttonbar.minlabel.txt=W...